# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Count {
  groups: Int
  instructors: Int
  students: Int
}

type Course {
  _count: Count
  grade: Grade
  gradeId: Int!
  id: Int!
  level: Level
  levelId: Int!
  name: String!
  price: Float!
  specialization: Specialization
  specializationId: Int!
  subject: Subject
  subjectId: Int!
}

input CreateCourseInput {
  gradeId: Int!
  levelId: Int!
  name: String!
  price: Float!
  specializationId: Int!
  subjectId: Int!
}

input CreateGradeInputs {
  levels: [GradeLevelsInput!]!
  name: String!
}

input CreateGroupInputs {
  courseId: Int!
  instructorId: Int!
  name: String!
}

input CreateInstructorInputs {
  address: String!
  birthDate: DateTime!
  cin: String
  firstName: String!
  lastName: String!
  phone: String!
  photo: String
  username: String!
}

input CreateStudentInputs {
  address: String!
  birthDate: DateTime!
  cin: String
  firstName: String!
  gradeId: Int!
  lastName: String!
  levelId: Int!
  phone: String!
  photo: String
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Grade {
  _count: GradeCount
  id: Int!
  levels: [GradeLevels!]
  name: String!
}

type GradeCount {
  courses: Int
  students: Int
}

type GradeLevels {
  id: Int!
  name: String!
}

input GradeLevelsInput {
  name: String!
}

type Group {
  _count: GroupCount
  course: Course
  courseId: Int!
  id: Int!
  instructor: Instructor
  instructorId: Int!
  name: String!
  students: [Student!]
}

type GroupCount {
  students: Int!
}

type Instructor {
  _count: InstructorCount
  courses: [InstructorCourse!]
  groups: [Group!]
  id: Int!
  user: User
  userId: Int!
}

type InstructorCount {
  courses: Int!
  groups: Int!
}

type InstructorCourse {
  course: Course
  courseId: Int!
  id: Int!
  instructorId: Int!
  percentage: Float!
}

type Level {
  grade: Grade
  gradeId: Int!
  id: Int!
  name: String!
}

type Mutation {
  createCourse(inputs: CreateCourseInput!): Course!
  createGrade(inputs: CreateGradeInputs!): Grade!
  createGroup(inputs: CreateGroupInputs!): Group!
  createInstructor(inputs: CreateInstructorInputs!): Instructor!
  createSpecialization(name: String!): Specialization!
  createStudent(inputs: CreateStudentInputs!): Student!
  createSubject(name: String!): Subject!
  deleteCourse(courseId: Int!): Course!
  deleteGroup(id: Int!): Group!
  deleteSpecialization(id: Int!): Specialization!
  deleteSubject(id: Int!): Subject!
  updateCourseName(courseId: Int!, name: String!): Course!
  updateCoursePrice(courseId: Int!, price: Float!, updateForStudents: Boolean!): Course!
}

type Query {
  course(id: Int!): Course!
  courses: [Course!]!
  findGroups: [Group!]!
  findManySpecialization: [Specialization!]!
  findManySubject: [Subject!]!
  findOneGroup(id: Int!): Group!
  findOneSpecialization(id: Int!): Specialization!
  findOneSubject(id: Int!): Subject!
  hello: String!
}

type Specialization {
  id: Int!
  name: String!
}

type Student {
  createdAt: DateTime!
  gradeId: Int!
  id: Int!
  levelId: Int!
  updatedAt: DateTime!
  user: User
  userId: Int!
}

type Subject {
  id: Int!
  name: String!
}

type User {
  address: String!
  birthDate: DateTime!
  cin: String
  createdAt: DateTime!
  firstName: String!
  generatedPassword: String!
  id: Int!
  isPasswordChanged: Boolean!
  lastName: String!
  phone: String!
  photo: String
  role: String!
  updatedAt: DateTime!
  username: String!
}