# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddInstructorCourseInputs {
  courseId: Int!
  instructorId: Int!
  percentage: Float!
}

input AddStudentToCourse {
  courseId: Int!
  groupId: Int!
  price: Float
  studentId: Int!
}

type Count {
  groups: Int
  instructors: Int
  students: Int
}

type Course {
  _count: Count
  grade: Grade
  gradeId: Int!
  id: Int!
  level: Level
  levelId: Int!
  name: String!
  price: Float!
  specialization: Specialization
  specializationId: Int!
  subject: Subject
  subjectId: Int!
}

input CourseFilterInputs {
  gradeId: Int
  levelId: Int
  limit: Int = 20
  name: String = ""
  page: Int = 1
  specializationId: Int
  subjectId: Int
}

input CreateCourseInput {
  gradeId: Int!
  levelId: Int!
  name: String!
  price: Float!
  specializationId: Int!
  subjectId: Int!
}

input CreateGradeInputs {
  levels: [GradeLevelsInput!]!
  name: String!
}

input CreateGroupInputs {
  courseId: Int!
  instructorId: Int!
  name: String!
}

input CreateInstructorInputs {
  address: String!
  birthDate: DateTime!
  cin: String
  firstName: String!
  lastName: String!
  phone: String!
  photo: String
}

input CreateParentInput {
  address: String!
  birthDate: DateTime!
  cin: String
  firstName: String!
  lastName: String!
  phone: String!
  photo: String
  studentId: Int!
}

input CreateStudentInputs {
  address: String!
  birthDate: DateTime!
  cin: String
  firstName: String!
  gradeId: Int!
  lastName: String!
  levelId: Int!
  phone: String!
  photo: String
  specializationId: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Grade {
  _count: GradeCount
  id: Int!
  levels: [GradeLevels!]
  name: String!
}

type GradeCount {
  courses: Int
  students: Int
}

type GradeLevels {
  id: Int!
  name: String!
}

input GradeLevelsInput {
  name: String!
}

type Group {
  _count: GroupCount
  course: Course
  courseId: Int!
  id: Int!
  instructor: Instructor
  instructorId: Int!
  name: String!
  students: [Student!]
}

type GroupCount {
  students: Int!
}

type Instructor {
  _count: InstructorCount
  courses: [InstructorCourse!]
  groups: [Group!]
  id: Int!
  user: User
  userId: Int!
}

type InstructorCount {
  courses: Int!
  groups: Int!
}

type InstructorCourse {
  course: Course
  courseId: Int!
  id: Int!
  instructorId: Int!
  percentage: Float!
}

input InstructorFilterInputs {
  limit: Int = 20
  name: String = ""
  page: Int = 1
}

type Level {
  grade: Grade
  gradeId: Int!
  id: Int!
  name: String!
}

type Mutation {
  addCourse(inputs: CreateCourseInput!): Course!
  addGrade(inputs: CreateGradeInputs!): Grade!
  addGroup(inputs: CreateGroupInputs!): Group!
  addInstructor(inputs: CreateInstructorInputs!): Instructor!
  addInstructorToCourse(inputs: AddInstructorCourseInputs!): InstructorCourse!
  addParent(inputs: CreateParentInput!): Parent!
  addStudent(inputs: CreateStudentInputs!): Student!
  addStudentToCourse(inputs: AddStudentToCourse!): StudentCourse!
  addStudentToGroup(inputs: addStudentToGroup!): Student!
  addStudentsToGroup(inputs: addStudentsToGroup!): Group!
  addSubject(name: String!): Subject!
  changeGroupInstructor(groupId: Int!, instructorId: Int!): Group!
  changeStudentGroup(inputs: changeStudentGroup!): Student!
  changeStudentsGroup(inputs: changeStudentsGroup!): Group!
  createSpecialization(name: String!): Specialization!
  deleteCourse(courseId: Int!): Course!
  deleteGroup(id: Int!): Group!
  deleteInstructor(id: Int!): Instructor!
  deleteInstructorFromCourse(instructorCourseId: Int!): InstructorCourse!
  deleteSpecialization(id: Int!): Specialization!
  deleteStudent(id: Int!): Student!
  deleteSubject(id: Int!): Subject!
  deletetudentCourse(studentCourseId: Int!): StudentCourse!
  removeStudentFromGroup(inputs: RemoveStudentFromGroupInputs!): Student!
  removeStudentsFromGroup(inputs: RemoveStudentsFromGroupInputs!): Group!
  updateCourseName(courseId: Int!, name: String!): Course!
  updateCoursePrice(courseId: Int!, price: Float!, updateForStudents: Boolean!): Course!
  updateInstructorCoursePercentage(instructorCourseId: Int!, percentage: Float!): InstructorCourse!
  updateStudentCourse(price: Float!, studentCourseId: Int!): StudentCourse!
}

type Parent {
  id: Int!
  students: [Student!]
  user: User
  userId: Int!
}

type Query {
  course(id: Int!): Course!
  courses(args: CourseFilterInputs!): [Course!]!
  grade(id: Int!): Grade!
  grades: [Grade!]!
  group(id: Int!): Group!
  groups(courseId: Int!, name: String = ""): [Group!]!
  hello: String!
  instructor(id: Int!): Instructor!
  instructors(args: InstructorFilterInputs!): [Instructor!]!
  levels(gradeId: Int!): [Level!]!
  specialization(id: Int!): Specialization!
  specializations: [Specialization!]!
  student(id: Int!): Student!
  students(args: StudentFilterInputs!): [Student!]!
  subject(id: Int!): Subject!
  subjects: [Subject!]!
}

input RemoveStudentFromGroupInputs {
  groupId: Int!
  studentId: Int!
}

input RemoveStudentsFromGroupInputs {
  groupId: Int!
  studentsId: [Int!]!
}

type Specialization {
  id: Int!
  name: String!
  students: [Student!]
}

type Student {
  _count: StudentsCount
  courses: [StudentCourse!]
  createdAt: DateTime!
  grade: Grade
  gradeId: Int!
  groups: [Group!]
  id: Int!
  level: Level
  levelId: Int!
  parent: Parent
  parentId: Int
  specialization: Specialization
  specializationId: Int
  updatedAt: DateTime!
  user: User
  userId: Int!
}

type StudentCourse {
  course: Course!
  courseId: Int!
  id: Int!
  price: Float!
  student: Student
  studentId: Int!
}

input StudentFilterInputs {
  gradeId: Int
  levelId: Int
  limit: Int = 20
  name: String = ""
  page: Int = 1
  specializationId: Int
}

type StudentsCount {
  courses: Int!
  groups: Int!
}

type Subject {
  id: Int!
  name: String!
}

type User {
  address: String!
  birthDate: DateTime!
  cin: String
  createdAt: DateTime!
  firstName: String!
  generatedPassword: String!
  id: Int!
  isPasswordChanged: Boolean!
  lastName: String!
  phone: String!
  photo: String
  role: String!
  updatedAt: DateTime!
  username: String!
}

input addStudentToGroup {
  groupId: Int!
  studentId: Int!
}

input addStudentsToGroup {
  groupId: Int!
  studentsIds: [Int!]!
}

input changeStudentGroup {
  newGroupId: Int!
  oldGroupId: Int!
  studentId: Int!
}

input changeStudentsGroup {
  newGroupId: Int!
  oldGroupId: Int!
  studentsIds: [Int!]!
}