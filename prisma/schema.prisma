// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Admin
  Staff
  Instructor
  Parent
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  password          String
  generatedPassword String
  isPasswordChanged Boolean   @default(false)
  firstName         String
  lastName          String
  photo             String?   @default("images/avatar.png")
  phone             String    @unique
  address           String
  cin               String?   @unique
  birthDate         DateTime?
  role              Role
  updatedAt         DateTime  @updatedAt
  createdAt         DateTime  @default(now())
  student           Student?
  parent            Parent?


  @@unique([firstName, lastName], name: "fullName")
  @@map("users")
}

model Student {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId  Int?
  parent    Parent?  @relation(fields: [parentId], references: [id], onDelete: Restrict)
  gradeId   Int
  grade     Grade    @relation(fields: [gradeId], references: [id], onDelete: NoAction)
  levelId   Int
  level     Level    @relation(fields: [levelId], references: [id], onDelete: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  StudentCourse StudentCourse[]
  @@map("students")
}

model Parent {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("parents")
}

model Grade {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
  levels   Level[]
  courses  Course[]

  @@map("grades")
}

model Level {
  id       Int       @id @default(autoincrement())
  name     String
  gradeId  Int
  grade    Grade     @relation(fields: [gradeId], references: [id])
  students Student[]
  courses  Course[]

  @@unique([name, gradeId])
  @@map("levels")
}

model Specialization {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]

  @@map("specializations")
}

model Subject {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  courses Course[]

  @@map("subjects")
}

model Course {
  id               Int             @id @default(autoincrement())
  name             String
  price            Float
  gradeId          Int
  grade            Grade           @relation(fields: [gradeId], references: [id])
  levelId          Int
  level            Level           @relation(fields: [levelId], references: [id])
  specializationId Int
  specialization   Specialization  @relation(fields: [specializationId], references: [id])
  subjectId        Int
  subject          Subject         @relation(fields: [subjectId], references: [id])
  StudentCourse    StudentCourse[]
}

model StudentCourse {
  id        Int     @id @default(autoincrement())
  studentId Int
  student   Student @relation(fields: [studentId], references: [id])
  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id])
  price     Float

  @@unique([studentId, courseId])
}
